
@unpublished{jean-francois_huard_chordal_nodate,
	title = {Chordal {Graphs}: {Their} {Testing} and {Their} {Role} {Chordal} {Graphs}: {Their} {Testing} and {Their} {Role}},
	shorttitle = {Chordal {Graphs}},
	url = {/paper/Chordal-Graphs-Their-Testing-and-Their-Role-Chorda-Huard/282c729fe589f328bbe8937714970d15dbb7f18a},
	abstract = {This report is twofold. We rst brieey discuss the role of chordal graphs for Gaussian elimination in sparse matrices and their role in the area of probabilistic reasoning in expert systems. In the second part we address the problem of testing whether a graph is chordal or not. If it is not, we propose an edge ll-in so as to become chordal. To this purpose, we present two algorithms. A new kind of graph search called Maximum Cardinality Search (MCS), and a graph ll-in computation algorithm that generates a set of edges F such that the resulting graph G 0 = (V; E F) is chordal. If the ll-in generated is empty, then the graph is chordal. Both the search and the ll-in run in linear-time, thus, testing graph chordality is linear.},
	urldate = {2017-06-13},
	author = {{Jean-François Huard}},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/A26BND6J/282c729fe589f328bbe8937714970d15dbb7f18a.html:text/html}
}

@article{chandrasekharan_nc_1988,
	title = {{NC} algorithms for recognizing chordal graphs and k trees},
	volume = {37},
	issn = {0018-9340},
	doi = {10.1109/12.5979},
	abstract = {The authors present parallel algorithms for recognizing the chordal graphs and k trees. Under the PRAM (parallel random-access-machine) model of computation with concurrent reading and writing allowed, these algorithms take O(log n) time and require O(n4) processors. The algorithms have a better processor bound than an independent result by A. Edenbrandt (1985) for recognizing chordal graphs in parallel using O(n3m) processors},
	number = {10},
	journal = {IEEE Transactions on Computers},
	author = {Chandrasekharan, N. and Iyengar, S. S.},
	month = oct,
	year = {1988},
	keywords = {chordal graph recognition, Computational modeling, Concurrent computing, graph theory, Hardware, k trees, NC algorithms, parallel algorithms, Particle separators, Phase change random access memory, Polynomials, PRAM, Terminology, Tree graphs, trees (mathematics), Writing},
	pages = {1178--1183},
	file = {IEEE Xplore Abstract Record:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/5BD7ZK9M/5979.html:text/html}
}

@article{klein_efficient_1996,
	title = {Efficient {Parallel} {Algorithms} for {Chordal} {Graphs}},
	volume = {25},
	issn = {0097-5397},
	url = {http://epubs.siam.org/doi/abs/10.1137/S0097539789166880},
	doi = {10.1137/S0097539789166880},
	abstract = {We give the first efficient parallel algorithms for recognizing chordal graphs, finding a maximum clique and a maximum independent set in a chordal graph, finding an optimal coloring of a chordal graph, finding a breadth-first search tree and a depth-first search tree of a chordal graph, recognizing interval graphs, and testing interval graphs for isomorphism. The key to our results is an efficient parallel algorithm for finding a perfect elimination ordering.},
	number = {4},
	urldate = {2017-06-13},
	journal = {SIAM J. Comput.},
	author = {Klein, P.},
	month = aug,
	year = {1996},
	pages = {797--827},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/C5QJP8HA/S0097539789166880.html:text/html}
}

@article{tarjan_simple_1984,
	title = {Simple {Linear}-{Time} {Algorithms} to {Test} {Chordality} of {Graphs}, {Test} {Acyclicity} of {Hypergraphs}, and {Selectively} {Reduce} {Acyclic} {Hypergraphs}},
	volume = {13},
	issn = {0097-5397},
	url = {http://epubs.siam.org/doi/abs/10.1137/0213035},
	doi = {10.1137/0213035},
	abstract = {Chordal graphs arise naturally in the study of Gaussian elimination on sparse symmetric matrices; acyclic hypergraphs arise in the study of relational data bases. Rose, Tarjan and Lueker [SIAM J. Comput., 5 (1976), pp. 266–283] have given a linear-time algorithm to test whether a graph is chordal, which Yannakakis has modified to test whether a hypergraph is acyclic. Here we develop a simplified linear-time test for graph chordality and hypergraph acyclicity. The test uses a new kind of graph (and hypergraph) search, which we call maximum cardinality search A variant of the method gives a way to selectively reduce acyclic hypergraphs, which is needed for evaluating queries in acyclic relational data bases.},
	number = {3},
	urldate = {2017-06-13},
	journal = {SIAM J. Comput.},
	author = {Tarjan, R. and Yannakakis, M.},
	month = aug,
	year = {1984},
	pages = {566--579},
	file = {Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/DZIJADBP/0213035.html:text/html}
}

@article{edenbrandt_chordal_1987,
	title = {Chordal graph recognition is in {NC}},
	volume = {24},
	issn = {0020-0190},
	url = {http://www.sciencedirect.com/science/article/pii/0020019087901402},
	doi = {10.1016/0020-0190(87)90140-2},
	number = {4},
	urldate = {2017-06-13},
	journal = {Information Processing Letters},
	author = {Edenbrandt, Anders},
	month = mar,
	year = {1987},
	keywords = {analysis of algorithms, Chordal graph, computational complexity, graph separator, parallel processing},
	pages = {239--241},
	file = {ScienceDirect Snapshot:/home/gabriele/.zotero/zotero/fuzoq98e.default/zotero/storage/VBGZQPBF/0020019087901402.html:text/html}
}